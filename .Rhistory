}
else {if (j<21){
b.matrix[,j]=sample(c(runif(1,1,2),runif(1,5,6),runif(2,9,10)),K)
}
else {
b.matrix[,j]=sample(c(runif(1,-2,-1),runif(1,-6,-5),runif(2,-10,-9)),K)
}
}
}
modified.b.matrix<-matrix(0,ncol=60,nrow=K)
for (j in 1:30){
modified.b.matrix[,(j*2-1)]=b.matrix[,j]
}
}} else {
if (level=="h"){
fixed.b=c(runif(5,1,3),runif(5,-3,-1))
b.matrix=matrix(0,ncol=30,nrow=K)
for (j in 1:30){
if (j<11){
b.matrix[,j]=sample(c(runif(5,1,1.5),runif(5,-1.5,-1)),K)
}
else {if (j<21){
b.matrix[,j]=sample(c(runif(3,1,1.5),runif(3,2,2.5),runif(4,3,3.5)),K)
}
else {
b.matrix[,j]=sample(c(runif(3,-1.5,-1),runif(3,-2.5,-2),runif(4,-3.5,-3)),K)
}
}
}
modified.b.matrix<-matrix(0,ncol=60,nrow=K)
for (j in 1:30){
modified.b.matrix[,(j*2-1)]=b.matrix[,j]
}
} else if (level=="m"){
fixed.b=c(runif(5,1,3),runif(5,-3,-1))
b.matrix=matrix(0,ncol=30,nrow=K)
for (j in 1:30){
if (j<11){
b.matrix[,j]=sample(c(runif(5,2,2.5),runif(5,-2.5,-2)),K)
}
else {if (j<21){
b.matrix[,j]=sample(c(runif(3,1,1.5),runif(3,3,3.5),runif(4,5,5.5)),K)
}
else {
b.matrix[,j]=sample(c(runif(3,-1.5,-1),runif(3,-3.5,-3),runif(4,-5.5,-5)),K)
}
}
}
modified.b.matrix<-matrix(0,ncol=60,nrow=K)
for (j in 1:30){
modified.b.matrix[,(j*2-1)]=b.matrix[,j]
}
} else {
fixed.b=c(runif(5,1,6),runif(5,-6,-1))
b.matrix=matrix(0,ncol=30,nrow=K)
for (j in 1:30){
if (j<11){
b.matrix[,j]=sample(c(runif(5,5,6.5),runif(5,-6.5,-5)),K)
}
else {if (j<21){
b.matrix[,j]=sample(c(runif(3,1,2),runif(3,5,6),runif(4,9,10)),K)
}
else {
b.matrix[,j]=sample(c(runif(3,-2,-1),runif(3,-6,-5),runif(4,-10,-9)),K)
}
}
}
modified.b.matrix<-matrix(0,ncol=60,nrow=K)
for (j in 1:30){
modified.b.matrix[,(j*2-1)]=b.matrix[,j]
}
}
}
if (Pred_type=="Con"){
while (t<K){
n.temp=sample(seq(nlower,nupper),1)
n=c(n,n.temp)
sid.temp=rep(t+1,n.temp)
sid=c(sid,sid.temp)
temp.x=mvrnorm(n.temp,mu=rep(0,J),Sigma=Sigma)
temp.rb=c(fixed.b[1:5],rep(0,100),fixed.b[6:10],rep(0,100),modified.b.matrix[(t+1),])
temp.y=rnorm(1,0,5)+temp.x[,1:270]%*%temp.rb+rnorm(n.temp,0,sigma)
temp.y=temp.y
x=rbind(x,scale(temp.x))
y=c(y,temp.y)
t=t+1
}} else {
allele.freq=runif(J,0.05,0.5)
while (t<K){
n.temp=sample(seq(nlower,nupper),1)
n=c(n,n.temp)
sid.temp=rep(t+1,n.temp)
sid=c(sid,sid.temp)
divider=rep(0,J)
temp.x1=matrix(0,ncol=J,nrow=n.temp)
temp.x2=matrix(0,ncol=J,nrow=n.temp)
temp.z1=mvrnorm(n.temp,mu=rep(0,J),Sigma=Sigma)
temp.z2=mvrnorm(n.temp,mu=rep(0,J),Sigma=Sigma)
for (j in 1:J){
temp.x1[,j]=ifelse(temp.z1[,j]<=qnorm(allele.freq[j]),1,0)
temp.x2[,j]=ifelse(temp.z2[,j]<=qnorm(allele.freq[j]),1,0)
divider[j]=sqrt(allele.freq[j]*(1-allele.freq[j]))
}
temp.x=temp.x1+temp.x2
temp.rb=c(fixed.b[1:5],rep(0,100),fixed.b[6:10],rep(0,100),modified.b.matrix[(t+1),])/divider[1:270]
temp.y=rnorm(1,0,5)+temp.x[,1:270]%*%temp.rb+rnorm(n.temp,0,sigma)
temp.x=scale(temp.x)
temp.x[is.na(temp.x)]<-0
x=rbind(x,temp.x)
y=c(y,temp.y)
t=t+1
}
}
x=x[-1,]
y=y[-1]
n=n[-1]
sid=sid[-1]
return(list(x,y,n,sid))
}
data=Data_Generator(Pred_type="Con", K=4,level="e",sigma=4,nlower=50,nupper=300)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],solution_path = TRUE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],solution_path = FALSE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],Solution_path = FALSE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],Solution_Path = FALSE)
document()
install.packages("HomUHet")
install.packages("HomUHet")
version()
R.version()
detach(HomUHet)
detach("HomUHet")
install("HomUHet")
install_github("Pei-Yang/HomUHet",auth_token="6c306d53d56f1e8a2ce6601b9a83a234fa18e2e5")
library(HomUHet)
data=Data_Generator(Pred_type="Con", K=4,level="e",sigma=4,nlower=50,nupper=300)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],solution_ath = TRUE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],solution_path = TRUE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]],solution_ath = TRUE)
fit<-HomUHet(data=cbind(data[[2]],data[[1]]),sid=data[[4]])
summary(fit)
fit$Homo
fit$Heter
fit$Homo_estimates
fit$Heter_estimates
document()
document()
check(cleanup = FALSE,manual = TRUE,path = getwd())
document()
check(cleanup = FALSE,manual = TRUE,path = getwd())
check(manual = TRUE,path = getwd())
document()
check(manual = TRUE,path = getwd())
document()
check(manual = TRUE,path = getwd())
document()
document()
check(manual = TRUE,path = getwd())
check()
check(manual=TRUE)
?check()
check_built(
path = NULL,
cran = FALSE,
remote = FALSE,
incoming = remote,
force_suggests = FALSE,
run_dont_test = FALSE,
manual = TRUE,
args = "--timings",
env_vars = NULL,
check_dir = tempdir(),
quiet = FALSE,
error_on = c("never", "error", "warning", "note")
)
check_built(
path = "/Users/sephinapeiyang/Documents/R packages/HomUHet",
cran = FALSE,
remote = FALSE,
incoming = remote,
force_suggests = FALSE,
run_dont_test = FALSE,
manual = TRUE,
args = "--timings",
env_vars = NULL,
check_dir = tempdir(),
quiet = FALSE,
error_on = c("never", "error", "warning", "note")
)
check_built(
path = "/Users/sephinapeiyang/Documents/R packages/HomUHet",
cran = FALSE,
remote = FALSE,
incoming = FLASE,
force_suggests = FALSE,
run_dont_test = FALSE,
manual = TRUE,
args = "--timings",
env_vars = NULL,
check_dir = tempdir(),
quiet = FALSE,
error_on = c("never", "error", "warning", "note")
)
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
document()
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
promptPackage()
promptPackage(package=HomUHet)
promptPackage(package="HomUHet")
document()
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE, check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet")
check()
document()
usethis::use_package("MASS")
document()
roxygenise()
document()
usethis::use_package("mvtnorm")
document()
document()
document()
document()
document()
document()
document()
document()
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
document()
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
document()
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages")
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages",vignettes=FALSE)
use_data_raw()
usethis::use_data(HomUHet_data, overwrite = TRUE)
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages",vignettes=FALSE)
document()
document()
document()
document()
document()
set.seed(100)
HomUHet_data=HomUHet.sim(Pred_type="Gaussian", J=500, K=4, beta=NULL,
rho=0.5,sigma=2, level="m",
nlower=50,nupper=300)
usethis::use_data(HomUHet_data, overwrite = TRUE)
library(HomUHet)
HomUHet_data[1:4,1:4]
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages",vignettes=FALSE)
document()
check(manual=TRUE,check_dir="/Users/sephinapeiyang/Documents/R packages",vignettes=FALSE)
document()
library(devtools)
library(roxygen2)
document()
?check()
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
library(HomUHet)
HomUHet(data=HomUHet_data,solution_path_plot=TRUE)
fit=HomUHet(data=HomUHet_data)
fit$Homo
fit$Heter
fit$coefficients[1:2,]
fit$coefficients[1:2,type=="Homogeneous"]
fit$coefficients[1:2,]
fit$coefficients[(fit$coefficients)$type=="Homogeneous",]
fit$coefficients[(fit$coefficients)$type=="Heterogeneous",]
beta=cbind(c(2,2,2), matrix(0,ncol=10,nrow=3),c(2,4,6))
K=nrow(beta)
J=ncol(beta)
allele_freq=runif(J,0.05,0.5)
mydata=HomUHet.sim(Pred_type="SNP", J=J, K=K, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=200, allele_freq=allele_freq)
mydata[1:2,1:5]
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
document()
document()
document()
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet",manual=TRUE)
document()
install_github("Pei-Yang/HomUHet", auth_token="6c306d53d56f1e8a2ce6601b9a83a234fa18e2e5")
install_github("Pei-Yang/HomUHet", auth_token="6c306d53d56f1e8a2ce6601b9a83a234fa18e2e5")
library(HomUHet)
library(HomUHet)
fit=HomUHet(data=HomUHet_data)
document()
library(devtools)
library(roxygen2)
document()
document()
document()
document()
document()
check(check_dir="/Users/sephinapeiyang/Documents/R packages/HomUHet", vignettes=FALSE)
HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, param_homo=c(-10,10),
param_heter=c(-10,10), example=NULL)
coef = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, param_homo=c(-10,10),
param_heter=c(-10,10), example=NULL)
# simulating coefficients
coef$beta
# this is the matrix of coefficients
# we can also extract the homogeneous coefficients by entering the following
(coef$beta)[,coef$homo_index]
# where homo_index tells us the column numbers of the homogeneous coefficients
(coef$beta)[1:4,1:5]
# this is a partial display of the matrix of coefficients
# we can also extract the homogeneous coefficients by entering the following
(coef$beta)[,coef$homo_index]
library(HomUHet)
setseed(100)
set.seed(100)
fit=HomUHet(data=HomUHet_data, solution_path_plot = TRUE)
fit$Homo # the identified homogeneous predictors (names are not provided so these are column names)
fit$Heter # the identified heterogeneous predictors
(fit$coefficients[(fit$coefficients)$type=="Homogeneous",])[1:5,]
# some of the estimated homogeneous coefficients
(fit$coefficients[(fit$coefficients)$type=="Heterogeneous",])[1:5,]
# some of the estimated coefficients
document()
rm(list = c("coef"))
document()
library(HomUHet)
library(HomUHet)
beta=coef_mat$beta
coef_mat = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, param_homo=c(-10,10),
param_heter=c(-10,10), example=NULL)
# simulating coefficients
(coef_mat$beta)[1:4,1:5]
# this is a partial display of the matrix of coefficients
# we can also extract the homogeneous coefficients by entering the following
(coef_mat$beta)[,coef_mat$homo_index]
# where homo_index tells us the column numbers of the homogeneous coefficients
beta=coef_mat$beta
# using coefficient matrix simulated from HomUHet.sim.beta
K=nrow(beta) # the number of studies
J=ncol(beta) # the number of predictors
n_cont=5 # 5 continuous predictors
n_SNP=13 # 13 SNPs
allele_freq=runif(n_SNP,0.05,0.5) # allele frequency
mydata=HomUHet.sim (J=J, K=K, param_age=c(40, 5), param_sex=0.5, n_cont=n_cont, n_SNP=n_SNP, allele_freq=allele_freq, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata[1:2,1:5] # a partial dsiplay of the simulated data
check()
library(HomUHet)
beta=coef_mat$beta
# using coefficient matrix simulated from HomUHet.sim.beta
K=nrow(beta) # the number of studies
J=ncol(beta) # the number of predictors
n_cont=5 # 5 continuous predictors
n_SNP=13 # 13 SNPs
allele_freq=runif(n_SNP,0.05,0.5) # allele frequency
mydata=HomUHet.sim (J=J, K=K, param_age=c(40, 5), param_sex=0.5, n_cont=n_cont, n_SNP=n_SNP, allele_freq=allele_freq, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata[1:2,1:5] # a partial dsiplay of the simulated data
coef_mat = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, param_homo=c(-10,10),
param_heter=c(-10,10), example=NULL)
# simulating coefficients
(coef_mat$beta)[1:4,1:5]
# this is a partial display of the matrix of coefficients
# we can also extract the homogeneous coefficients by entering the following
(coef_mat$beta)[,coef_mat$homo_index]
# where homo_index tells us the column numbers of the homogeneous coefficients
beta=coef_mat$beta
# using coefficient matrix simulated from HomUHet.sim.beta
K=nrow(beta) # the number of studies
J=ncol(beta) # the number of predictors
n_cont=5 # 5 continuous predictors
n_SNP=13 # 13 SNPs
allele_freq=runif(n_SNP,0.05,0.5) # allele frequency
mydata=HomUHet.sim (J=J, K=K, param_age=c(40, 5), param_sex=0.5, n_cont=n_cont, n_SNP=n_SNP, allele_freq=allele_freq, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=120)
dim(mydata)
dim(mydata$data)
mydata=HomUHet.sim (J=J, K=K, param_age=c(40, 5), param_sex=0.5, n_cont=n_cont, n_SNP=n_SNP, allele_freq=allele_freq, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=120)
dim(mydata)
library(HomUHet)
coef_mat = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, param_homo=c(-10,10),
param_heter=c(-10,10), example=NULL)
# simulating coefficients
(coef_mat$beta)[1:4,1:5]
# this is a partial display of the matrix of coefficients
# we can also extract the homogeneous coefficients by entering the following
(coef_mat$beta)[,coef_mat$homo_index]
# where homo_index tells us the column numbers of the homogeneous coefficients
beta=coef_mat$beta
# using coefficient matrix simulated from HomUHet.sim.beta
K=nrow(beta) # the number of studies
J=ncol(beta) # the number of predictors
n_cont=5 # 5 continuous predictors
n_SNP=13 # 13 SNPs
allele_freq=runif(n_SNP,0.05,0.5) # allele frequency
mydata=HomUHet.sim (J=J, K=K, param_age=c(40, 5), param_sex=0.5, n_cont=n_cont, n_SNP=n_SNP, allele_freq=allele_freq, beta=beta,
rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata[1:2,1:5]
set.seed(100)
fit=HomUHet(data=HomUHet_data, solution_path_plot = TRUE)
set.seed(100)
fit=HomUHet(data=HomUHet_data, solution_path_plot = TRUE)
fit$Homo
# the identified homogeneous predictors. if names are not provided, the predictor names will be displayed as "V_n" where n is the column number of predictors (excluding the study label and response variable).
(fit$Heter)[1:10]
# partial list of the identified heterogeneous predictors
(fit$coefficients[(fit$coefficients)$type=="Homogeneous",])[1:5,]
# partial display of the estimated homogeneous coefficients
(fit$coefficients[(fit$coefficients)$type=="Heterogeneous",])[1:5,]
# partial display of the estimated coefficients
set.seed(100)
fit=HomUHet(data=HomUHet_data, solution_path_plot = TRUE)
fit$Homo
# the identified homogeneous predictors. if names are not provided, the predictor names will be displayed as "V_n" where n is the column number of predictors (excluding the study label and response variable).
(fit$Heter)[1:10]
# partial list of the identified heterogeneous predictors
(fit$coefficients[(fit$coefficients)$type=="Homogeneous",])[1:5,]
# partial display of the estimated homogeneous coefficients
(fit$coefficients[(fit$coefficients)$type=="Heterogeneous",])
# partial display of the estimated coefficients
(fit$coefficients[(fit$coefficients)$type=="Heterogeneous",])
devtools::install_github("adletaw/captioner")
document()
library(HomUHet)
document()
library(HomUHet)
coef_mat = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, level="l")
(coef_mat$beta)[1:4,1:5]
(coef_mat$beta)[,coef_mat$homo_index]
K=4 # the number of studies
n_cont=5 # 5 continuous predictors
n_SNP=13 # 13 SNPs
n_homo=3 # 3 homo genetic predictors
n_heter=5 # 5 heterogeneous genetic predictors
mydata=HomUHet.sim (age=TRUE, sex=TRUE, n_cont=n_cont, n_SNP=n_SNP, rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata=HomUHet.sim (age=TRUE, sex=TRUE, n_cont=n_cont, n_SNP=n_SNP, n_homo=n_homo, n_heter=n_heter, rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata=HomUHet.sim (age=TRUE, sex=TRUE, K=4, n_cont=5, n_SNP=13, n_homo=3, n_heter=5, rho=0.5,sigma=2,
nlower=50,nupper=120)
mydata[1:2,1:5]
(mydata$data)[1:2,1:5]
library(HomUHet)
# simulating coefficients
coef_mat = HomUHet.sim.beta(J=20, K=4, n_homo=3, n_heter=4, level="l")
# below is a partial display of the matrix of coefficients
# each column contains the 4 coefficients of one predictor
# across 4 studies.
coef_mat$beta[,1:6]
# we can also extract the heterogeneous or homogeneous coefficients by entering the following:
(coef_mat$beta)[,coef_mat$heter_index]
# where heter_index tells us the column numbers of the heterogeneous coefficients
coef_mat$heter_index
